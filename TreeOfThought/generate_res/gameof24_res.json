[
  {
    "index": 0,
    "input": "1 1 4 6",
    "steps": [
      {
        "step": 1,
        "generated_samples": [
          "1 + 1 = 2 (left: 2 4 6)",
          "6 - 4 = 2 (left: 1 1 2)",
          "1 * 4 = 4 (left: 1 4 6)",
          "6 / 1 = 6 (left: 1 4 6)",
          "4 + 6 = 10 (left: 1 1 10)"
        ],
        "candidate_input_list": [
          "[2, 4, 6]",
          "[1, 1, 2]",
          "[1, 4, 6]",
          "[1, 4, 6]",
          "[1, 1, 10]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          10,
          10,
          0.01
        ],
        "new_target_input": [
          "[1, 4, 6]",
          "[1, 4, 6]",
          "[2, 4, 6]"
        ],
        "new_target_path": [
          "1 * 4 = 4 (left: 1 4 6)",
          "6 / 1 = 6 (left: 1 4 6)",
          "1 + 1 = 2 (left: 2 4 6)"
        ]
      },
      {
        "step": 2,
        "generated_samples": [
          "1 * 4 = 4 (left: 1 4 6)1 + 4 = 5 (left: 5 6)",
          "1 * 4 = 4 (left: 1 4 6)6 - 4 = 2 (left: 1 2)",
          "1 * 4 = 4 (left: 1 4 6)6 / 1 = 6 (left: 4 6)",
          "1 * 4 = 4 (left: 1 4 6)4 * 1 = 4 (left: 4 6)",
          "1 * 4 = 4 (left: 1 4 6)6 + 1 = 7 (left: 4 7)",
          "6 / 1 = 6 (left: 1 4 6)4 + 1 = 5 (left: 5 6)",
          "6 / 1 = 6 (left: 1 4 6)6 - 1 = 5 (left: 4 5)",
          "6 / 1 = 6 (left: 1 4 6)4 * 1 = 4 (left: 4 6)",
          "6 / 1 = 6 (left: 1 4 6)6 / 1 = 6 (left: 4 6)",
          "6 / 1 = 6 (left: 1 4 6)6 - 4 = 2 (left: 1 2)",
          "1 + 1 = 2 (left: 2 4 6)2 + 4 = 6 (left: 6 6)",
          "1 + 1 = 2 (left: 2 4 6)4 - 2 = 2 (left: 2 6)",
          "1 + 1 = 2 (left: 2 4 6)2 * 4 = 8 (left: 6 8)",
          "1 + 1 = 2 (left: 2 4 6)6 / 2 = 3 (left: 3 4)",
          "1 + 1 = 2 (left: 2 4 6)6 - 4 = 2 (left: 2 2)"
        ],
        "candidate_input_list": [
          "[5, 6]",
          "[1, 2]",
          "[4, 6]",
          "[4, 6]",
          "[4, 7]",
          "[5, 6]",
          "[4, 5]",
          "[4, 6]",
          "[4, 6]",
          "[1, 2]",
          "[6, 6]",
          "[2, 6]",
          "[6, 8]",
          "[3, 4]",
          "[2, 2]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          10,
          10,
          0.01,
          0.01,
          0.01,
          10,
          10,
          0.01,
          0.01,
          0.01,
          0.01,
          0,
          0
        ],
        "new_target_input": [
          "[4, 6]",
          "[4, 6]",
          "[4, 6]"
        ],
        "new_target_path": [
          "1 * 4 = 4 (left: 1 4 6)6 / 1 = 6 (left: 4 6)",
          "1 * 4 = 4 (left: 1 4 6)4 * 1 = 4 (left: 4 6)",
          "6 / 1 = 6 (left: 1 4 6)4 * 1 = 4 (left: 4 6)"
        ]
      },
      {
        "step": 3,
        "generated_samples": [
          "1 * 4 = 4 (left: 1 4 6)6 / 1 = 6 (left: 4 6)4 + 6 = 10 (left: 10)",
          "1 * 4 = 4 (left: 1 4 6)6 / 1 = 6 (left: 4 6)6 - 4 = 2 (left: 2)",
          "1 * 4 = 4 (left: 1 4 6)6 / 1 = 6 (left: 4 6)4 * 6 = 24 (left: 24)",
          "1 * 4 = 4 (left: 1 4 6)6 / 1 = 6 (left: 4 6)6 / 4 = 1.5 (left: 1.5)",
          "1 * 4 = 4 (left: 1 4 6)6 / 1 = 6 (left: 4 6)4 / 6 = 0.666 (left: 0.666)",
          "1 * 4 = 4 (left: 1 4 6)4 * 1 = 4 (left: 4 6)4 + 6 = 10 (left: 10)",
          "1 * 4 = 4 (left: 1 4 6)4 * 1 = 4 (left: 4 6)6 - 4 = 2 (left: 2)",
          "1 * 4 = 4 (left: 1 4 6)4 * 1 = 4 (left: 4 6)4 * 6 = 24 (left: 24)",
          "1 * 4 = 4 (left: 1 4 6)4 * 1 = 4 (left: 4 6)6 / 4 = 1.5 (left: 1.5)",
          "1 * 4 = 4 (left: 1 4 6)4 * 1 = 4 (left: 4 6)4 / 6 = 0.666... (left: 0.666...)",
          "6 / 1 = 6 (left: 1 4 6)4 * 1 = 4 (left: 4 6)4 + 6 = 10 (left: 10)",
          "6 / 1 = 6 (left: 1 4 6)4 * 1 = 4 (left: 4 6)6 - 4 = 2 (left: 2)",
          "6 / 1 = 6 (left: 1 4 6)4 * 1 = 4 (left: 4 6)4 * 6 = 24 (left: 24)",
          "6 / 1 = 6 (left: 1 4 6)4 * 1 = 4 (left: 4 6)6 / 4 = 1.5 (left: 1.5)",
          "6 / 1 = 6 (left: 1 4 6)4 * 1 = 4 (left: 4 6)4 / 6 = 0.666... (left: 0.666...)"
        ],
        "candidate_input_list": [
          "[10]",
          "[2]",
          "[24]",
          "[10]",
          "[2]",
          "[24]",
          "[10]",
          "[2]",
          "[24]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          10,
          0.01,
          0.01,
          10,
          0.01,
          0.01,
          10
        ],
        "new_target_input": [
          "[24]",
          "[24]",
          "[24]"
        ],
        "new_target_path": [
          "1 * 4 = 4 (left: 1 4 6)6 / 1 = 6 (left: 4 6)4 * 6 = 24 (left: 24)",
          "1 * 4 = 4 (left: 1 4 6)4 * 1 = 4 (left: 4 6)4 + 6 = 10 (left: 10)",
          "1 * 4 = 4 (left: 1 4 6)4 * 1 = 4 (left: 4 6)6 / 4 = 1.5 (left: 1.5)"
        ]
      }
    ]
  }
]