[
  {
    "index": 0,
    "input": "1 1 4 6",
    "steps": [
      {
        "step": 1,
        "generated_samples": [
          "6 - 4 = 2 (left: 1 1 2)",
          "6 + 4 = 10 (left: 1 1 10)",
          "6 * 4 = 24 (left: 1 1 24)",
          "6 / 1 = 6 (left: 1 4 6)",
          "4 + 1 = 5 (left: 1 5 6)"
        ],
        "candidate_input_list": [
          "[1, 1, 2]",
          "[1, 1, 10]",
          "[1, 1, 24]",
          "[1, 4, 6]",
          "[1, 5, 6]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          10,
          10,
          10
        ],
        "new_target_input": [
          "[1, 1, 24]",
          "[1, 4, 6]",
          "[1, 5, 6]"
        ],
        "new_target_path": [
          "6 * 4 = 24 (left: 1 1 24)",
          "6 / 1 = 6 (left: 1 4 6)",
          "4 + 1 = 5 (left: 1 5 6)"
        ]
      },
      {
        "step": 2,
        "generated_samples": [
          "6 * 4 = 24 (left: 1 1 24)1 + 1 = 2 (left: 2 24)",
          "6 * 4 = 24 (left: 1 1 24)1 * 24 = 24 (left: 1 24)",
          "6 * 4 = 24 (left: 1 1 24)24 - 1 = 23 (left: 1 23)",
          "6 / 1 = 6 (left: 1 4 6)6 - 4 = 2 (left: 1 2)",
          "6 / 1 = 6 (left: 1 4 6)4 + 1 = 5 (left: 5 6)",
          "6 / 1 = 6 (left: 1 4 6)6 + 4 = 10 (left: 1 10)",
          "6 / 1 = 6 (left: 1 4 6)6 * 4 = 24 (left: 1 24)",
          "6 / 1 = 6 (left: 1 4 6)6 - 1 = 5 (left: 4 5)",
          "4 + 1 = 5 (left: 1 5 6)6 - 5 = 1 (left: 1 1)",
          "4 + 1 = 5 (left: 1 5 6)5 + 1 = 6 (left: 6 6)",
          "4 + 1 = 5 (left: 1 5 6)5 * 1 = 5 (left: 5 6)",
          "4 + 1 = 5 (left: 1 5 6)6 + 1 = 7 (left: 5 7)",
          "4 + 1 = 5 (left: 1 5 6)6 * 5 = 30 (left: 1 30)"
        ],
        "candidate_input_list": [
          "[2, 24]",
          "[1, 24]",
          "[1, 23]",
          "[1, 2]",
          "[5, 6]",
          "[1, 10]",
          "[1, 24]",
          "[4, 5]",
          "[1, 1]",
          "[6, 6]",
          "[5, 6]",
          "[5, 7]",
          "[1, 30]"
        ],
        "candidate_scores": [
          10,
          10,
          10,
          0.01,
          0.01,
          0.01,
          10,
          0.01,
          0,
          0.01,
          0.01,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[2, 24]",
          "[1, 24]",
          "[1, 23]"
        ],
        "new_target_path": [
          "6 * 4 = 24 (left: 1 1 24)1 + 1 = 2 (left: 2 24)",
          "6 * 4 = 24 (left: 1 1 24)1 * 24 = 24 (left: 1 24)",
          "6 * 4 = 24 (left: 1 1 24)24 - 1 = 23 (left: 1 23)"
        ]
      },
      {
        "step": 3,
        "generated_samples": [
          "6 * 4 = 24 (left: 1 1 24)1 + 1 = 2 (left: 2 24)24 / 2 = 12 (left: 12)",
          "6 * 4 = 24 (left: 1 1 24)1 + 1 = 2 (left: 2 24)24 + 2 = 26 (left: 26)",
          "6 * 4 = 24 (left: 1 1 24)1 + 1 = 2 (left: 2 24)24 - 2 = 22 (left: 22)",
          "6 * 4 = 24 (left: 1 1 24)1 + 1 = 2 (left: 2 24)2 * 24 = 48 (left: 48)",
          "6 * 4 = 24 (left: 1 1 24)1 * 24 = 24 (left: 1 24)24 / 1 = 24 (left: 24)",
          "6 * 4 = 24 (left: 1 1 24)1 * 24 = 24 (left: 1 24)24 + 1 = 25 (left: 25)",
          "6 * 4 = 24 (left: 1 1 24)1 * 24 = 24 (left: 1 24)24 - 1 = 23 (left: 23)",
          "6 * 4 = 24 (left: 1 1 24)1 * 24 = 24 (left: 1 24)24 * 1 = 24 (left: 24)",
          "6 * 4 = 24 (left: 1 1 24)24 - 1 = 23 (left: 1 23)23 + 1 = 24 (left: 24)",
          "6 * 4 = 24 (left: 1 1 24)24 - 1 = 23 (left: 1 23)23 - 1 = 22 (left: 22)",
          "6 * 4 = 24 (left: 1 1 24)24 - 1 = 23 (left: 1 23)23 * 1 = 23 (left: 23)"
        ],
        "candidate_input_list": [
          "[12]",
          "[26]",
          "[22]",
          "[48]",
          "[24]",
          "[25]",
          "[23]",
          "[24]",
          "[24]",
          "[22]",
          "[23]"
        ],
        "candidate_scores": [
          0,
          0.01,
          0.01,
          0.01,
          10,
          0,
          0.01,
          10,
          10,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[24]",
          "[24]",
          "[24]"
        ],
        "new_target_path": [
          "6 * 4 = 24 (left: 1 1 24)1 * 24 = 24 (left: 1 24)24 / 1 = 24 (left: 24)",
          "6 * 4 = 24 (left: 1 1 24)1 * 24 = 24 (left: 1 24)24 * 1 = 24 (left: 24)",
          "6 * 4 = 24 (left: 1 1 24)24 - 1 = 23 (left: 1 23)23 + 1 = 24 (left: 24)"
        ]
      }
    ],
    "final_score": "passed"
  },
  {
    "index": 1,
    "input": "1 1 11 11",
    "steps": [
      {
        "step": 1,
        "generated_samples": [
          "11 + 1 = 12 (left: 1 11 12)",
          "11 - 1 = 10 (left: 10 11 1)",
          "1 * 1 = 1 (left: 1 11 11)",
          "11 * 1 = 11 (left: 11 11 1)"
        ],
        "candidate_input_list": [
          "[1, 11, 12]",
          "[10, 11, 1]",
          "[1, 11, 11]",
          "[11, 11, 1]"
        ],
        "candidate_scores": [
          10,
          0.01,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[1, 11, 12]",
          "[10, 11, 1]",
          "[1, 11, 11]"
        ],
        "new_target_path": [
          "11 + 1 = 12 (left: 1 11 12)",
          "11 - 1 = 10 (left: 10 11 1)",
          "1 * 1 = 1 (left: 1 11 11)"
        ]
      },
      {
        "step": 2,
        "generated_samples": [
          "11 + 1 = 12 (left: 1 11 12)12 / 11 = 1.09 (left: 1 1.09)",
          "11 + 1 = 12 (left: 1 11 12)12 - 11 = 1 (left: 1 1)",
          "11 + 1 = 12 (left: 1 11 12)11 + 1 = 12 (left: 12 12)",
          "11 + 1 = 12 (left: 1 11 12)12 * 1 = 12 (left: 11 12)",
          "11 + 1 = 12 (left: 1 11 12)12 - 1 = 11 (left: 11 11)",
          "11 - 1 = 10 (left: 10 11 1)11 - 10 = 1 (left: 1 1)",
          "11 - 1 = 10 (left: 10 11 1)10 + 11 = 21 (left: 1 21)",
          "11 - 1 = 10 (left: 10 11 1)10 * 1 = 10 (left: 10 11)",
          "11 - 1 = 10 (left: 10 11 1)11 * 1 = 11 (left: 10 11)",
          "11 - 1 = 10 (left: 10 11 1)10 - 1 = 9 (left: 9 11)",
          "1 * 1 = 1 (left: 1 11 11)11 - 1 = 10 (left: 10 11)",
          "1 * 1 = 1 (left: 1 11 11)11 + 1 = 12 (left: 11 12)",
          "1 * 1 = 1 (left: 1 11 11)11 * 1 = 11 (left: 11 11)"
        ],
        "candidate_input_list": [
          "[1, 1.09]",
          "[1, 1]",
          "[12, 12]",
          "[11, 12]",
          "[11, 11]",
          "[1, 1]",
          "[1, 21]",
          "[10, 11]",
          "[10, 11]",
          "[9, 11]",
          "[10, 11]",
          "[11, 12]",
          "[11, 11]"
        ],
        "candidate_scores": [
          0.01,
          0,
          10,
          0,
          0,
          0,
          1,
          0.01,
          0,
          0.01,
          0.01,
          0,
          0
        ],
        "new_target_input": [
          "[12, 12]",
          "[1, 21]",
          "[1, 1.09]"
        ],
        "new_target_path": [
          "11 + 1 = 12 (left: 1 11 12)11 + 1 = 12 (left: 12 12)",
          "11 - 1 = 10 (left: 10 11 1)10 + 11 = 21 (left: 1 21)",
          "11 + 1 = 12 (left: 1 11 12)12 / 11 = 1.09 (left: 1 1.09)"
        ]
      },
      {
        "step": 3,
        "generated_samples": [
          "11 + 1 = 12 (left: 1 11 12)11 + 1 = 12 (left: 12 12)12 + 12 = 24 (left: 24)",
          "11 + 1 = 12 (left: 1 11 12)11 + 1 = 12 (left: 12 12)12 * 12 = 144 (left: 144)",
          "11 + 1 = 12 (left: 1 11 12)11 + 1 = 12 (left: 12 12)12 - 12 = 0 (left: 0)",
          "11 - 1 = 10 (left: 10 11 1)10 + 11 = 21 (left: 1 21)21 + 1 = 22 (left: 22)",
          "11 - 1 = 10 (left: 10 11 1)10 + 11 = 21 (left: 1 21)21 - 1 = 20 (left: 20)",
          "11 - 1 = 10 (left: 10 11 1)10 + 11 = 21 (left: 1 21)21 / 1 = 21 (left: 21)",
          "11 - 1 = 10 (left: 10 11 1)10 + 11 = 21 (left: 1 21)21 * 1 = 21 (left: 21)",
          "11 + 1 = 12 (left: 1 11 12)12 / 11 = 1.09 (left: 1 1.09)1 + 1.09 = 2.09 (left: 2.09)",
          "11 + 1 = 12 (left: 1 11 12)12 / 11 = 1.09 (left: 1 1.09)1.  09 - 1 = 0.09 (left: 0.09)",
          "11 + 1 = 12 (left: 1 11 12)12 / 11 = 1.09 (left: 1 1.09)1 * 1.09 = 1.09 (left: 1.09)"
        ],
        "candidate_input_list": [
          "[24]",
          "[144]",
          "[0]",
          "[22]",
          "[20]",
          "[21]",
          "[21]",
          "[2.09]",
          "[0.09]",
          "[1.09]"
        ],
        "candidate_scores": [
          10,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[24]",
          "[144]",
          "[0]"
        ],
        "new_target_path": [
          "11 + 1 = 12 (left: 1 11 12)11 + 1 = 12 (left: 12 12)12 + 12 = 24 (left: 24)",
          "11 + 1 = 12 (left: 1 11 12)11 + 1 = 12 (left: 12 12)12 * 12 = 144 (left: 144)",
          "11 + 1 = 12 (left: 1 11 12)11 + 1 = 12 (left: 12 12)12 - 12 = 0 (left: 0)"
        ]
      }
    ],
    "final_score": "passed"
  },
  {
    "index": 2,
    "input": "1 1 3 8",
    "steps": [
      {
        "step": 1,
        "generated_samples": [
          "8 / (1 + 1) = 4 (left: 3 4)",
          "3 * 8 = 24 (left: 1 1 24)",
          "8 - 3 = 5 (left: 1 1 5)",
          "3 + 1 = 4 (left: 1 4 8)"
        ],
        "candidate_input_list": [
          "[3, 4]",
          "[1, 1, 24]",
          "[1, 1, 5]",
          "[1, 4, 8]"
        ],
        "candidate_scores": [
          0.01,
          10,
          0.01,
          10
        ],
        "new_target_input": [
          "[1, 1, 24]",
          "[1, 4, 8]",
          "[3, 4]"
        ],
        "new_target_path": [
          "3 * 8 = 24 (left: 1 1 24)",
          "3 + 1 = 4 (left: 1 4 8)",
          "8 / (1 + 1) = 4 (left: 3 4)"
        ]
      },
      {
        "step": 2,
        "generated_samples": [
          "3 * 8 = 24 (left: 1 1 24)1 + 1 = 2 (left: 2 24)",
          "3 * 8 = 24 (left: 1 1 24)24 / (1 + 1) = 12 (left: 12)",
          "3 * 8 = 24 (left: 1 1 24)24 * (1 + 1) = 48 (left: 48)",
          "3 * 8 = 24 (left: 1 1 24)24 - 1 = 23 (left: 1 23)",
          "3 * 8 = 24 (left: 1 1 24)24 + 1 = 25 (left: 1 25)",
          "3 + 1 = 4 (left: 1 4 8)8 / 1 = 8 (left: 4 8)",
          "3 + 1 = 4 (left: 1 4 8)4 * 8 = 32 (left: 1 32)",
          "3 + 1 = 4 (left: 1 4 8)4 * 1 = 4 (left: 4 8)",
          "3 + 1 = 4 (left: 1 4 8)8 - 4 = 4 (left: 1 4)",
          "3 + 1 = 4 (left: 1 4 8)8 - 1 = 7 (left: 4 7)",
          "8 / (1 + 1) = 4 (left: 3 4)4 * 3 = 12 (left: 12)",
          "8 / (1 + 1) = 4 (left: 3 4)4 + 3 = 7 (left: 7)",
          "8 / (1 + 1) = 4 (left: 3 4)4 - 3 = 1 (left: 1)"
        ],
        "candidate_input_list": [
          "[2, 24]",
          "[12]",
          "[48]",
          "[1, 23]",
          "[1, 25]",
          "[4, 8]",
          "[1, 32]",
          "[4, 8]",
          "[1, 4]",
          "[4, 7]",
          "[12]",
          "[7]",
          "[1]"
        ],
        "candidate_scores": [
          10,
          0.01,
          0.01,
          10,
          10,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[2, 24]",
          "[1, 23]",
          "[1, 25]"
        ],
        "new_target_path": [
          "3 * 8 = 24 (left: 1 1 24)1 + 1 = 2 (left: 2 24)",
          "3 * 8 = 24 (left: 1 1 24)24 - 1 = 23 (left: 1 23)",
          "3 * 8 = 24 (left: 1 1 24)24 + 1 = 25 (left: 1 25)"
        ]
      },
      {
        "step": 3,
        "generated_samples": [
          "3 * 8 = 24 (left: 1 1 24)1 + 1 = 2 (left: 2 24)24 / 2 = 12 (left: 12)",
          "3 * 8 = 24 (left: 1 1 24)1 + 1 = 2 (left: 2 24)24 + 2 = 26 (left: 26)",
          "3 * 8 = 24 (left: 1 1 24)1 + 1 = 2 (left: 2 24)24 - 2 = 22 (left: 22)",
          "3 * 8 = 24 (left: 1 1 24)1 + 1 = 2 (left: 2 24)2 * 24 = 48 (left: 48)",
          "3 * 8 = 24 (left: 1 1 24)24 - 1 = 23 (left: 1 23)23 + 1 = 24 (left: 24)",
          "3 * 8 = 24 (left: 1 1 24)24 - 1 = 23 (left: 1 23)23 - 1 = 22 (left: 22)",
          "3 * 8 = 24 (left: 1 1 24)24 - 1 = 23 (left: 1 23)23 * 1 = 23 (left: 23)",
          "3 * 8 = 24 (left: 1 1 24)24 + 1 = 25 (left: 1 25)25 - 1 = 24 (left: 24)",
          "3 * 8 = 24 (left: 1 1 24)24 + 1 = 25 (left: 1 25)25 + 1 = 26 (left: 26)"
        ],
        "candidate_input_list": [
          "[12]",
          "[26]",
          "[22]",
          "[48]",
          "[24]",
          "[22]",
          "[23]",
          "[24]",
          "[26]"
        ],
        "candidate_scores": [
          0,
          0.01,
          0.01,
          0.01,
          10,
          0.01,
          0.01,
          10,
          0.01
        ],
        "new_target_input": [
          "[24]",
          "[24]",
          "[26]"
        ],
        "new_target_path": [
          "3 * 8 = 24 (left: 1 1 24)24 - 1 = 23 (left: 1 23)23 + 1 = 24 (left: 24)",
          "3 * 8 = 24 (left: 1 1 24)24 + 1 = 25 (left: 1 25)25 - 1 = 24 (left: 24)",
          "3 * 8 = 24 (left: 1 1 24)1 + 1 = 2 (left: 2 24)24 + 2 = 26 (left: 26)"
        ]
      }
    ],
    "final_score": "passed"
  },
  {
    "index": 3,
    "input": "4 10 12 13",
    "steps": [
      {
        "step": 1,
        "generated_samples": [
          "12 / 4 = 3 (left: 3 10 13)",
          "13 - 10 = 3 (left: 3 4 12)",
          "12 + 10 = 22 (left: 4 13 22)",
          "4 * 10 = 40 (left: 12 13 40)",
          "13 - 4 = 9 (left: 9 10 12)"
        ],
        "candidate_input_list": [
          "[3, 10, 13]",
          "[3, 4, 12]",
          "[4, 13, 22]",
          "[12, 13, 40]",
          "[9, 10, 12]"
        ],
        "candidate_scores": [
          0.01,
          10,
          0,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[3, 4, 12]",
          "[3, 10, 13]",
          "[12, 13, 40]"
        ],
        "new_target_path": [
          "13 - 10 = 3 (left: 3 4 12)",
          "12 / 4 = 3 (left: 3 10 13)",
          "4 * 10 = 40 (left: 12 13 40)"
        ]
      },
      {
        "step": 2,
        "generated_samples": [
          "13 - 10 = 3 (left: 3 4 12)12 / 3 = 4 (left: 4 4)",
          "13 - 10 = 3 (left: 3 4 12)3 * 4 = 12 (left: 12 12)",
          "13 - 10 = 3 (left: 3 4 12)12 + 4 = 16 (left: 3 16)",
          "13 - 10 = 3 (left: 3 4 12)4 - 3 = 1 (left: 1 12)",
          "13 - 10 = 3 (left: 3 4 12)12 - 4 = 8 (left: 3 8)",
          "12 / 4 = 3 (left: 3 10 13)10 + 13 = 23 (left: 3 23)",
          "12 / 4 = 3 (left: 3 10 13)13 - 10 = 3 (left: 3 3)",
          "12 / 4 = 3 (left: 3 10 13)3 * 10 = 30 (left: 13 30)",
          "12 / 4 = 3 (left: 3 10 13)10 / 3 = 3.33 (left: 3.33 13)",
          "12 / 4 = 3 (left: 3 10 13)3 + 10 = 13 (left: 13 13)",
          "4 * 10 = 40 (left: 12 13 40)40 - 13 = 27 (left: 12 27)",
          "4 * 10 = 40 (left: 12 13 40)13 - 12 = 1 (left: 1 40)",
          "4 * 10 = 40 (left: 12 13 40)12 + 13 = 25 (left: 25 40)",
          "4 * 10 = 40 (left: 12 13 40)40 / 12 = 3.33 (left: 3.33 13)",
          "4 * 10 = 40 (left: 12 13 40)12 * 13 = 156 (left: 40 156)"
        ],
        "candidate_input_list": [
          "[4, 4]",
          "[12, 12]",
          "[3, 16]",
          "[1, 12]",
          "[3, 8]",
          "[3, 23]",
          "[3, 3]",
          "[13, 30]",
          "[3.33, 13]",
          "[13, 13]",
          "[12, 27]",
          "[1, 40]",
          "[25, 40]",
          "[3.33, 13]",
          "[40, 156]"
        ],
        "candidate_scores": [
          0.01,
          10,
          0.01,
          10,
          10,
          0.01,
          0.01,
          0.01,
          0,
          0.01,
          0.01,
          0.01,
          0.01,
          0,
          0.01
        ],
        "new_target_input": [
          "[12, 12]",
          "[1, 12]",
          "[3, 8]"
        ],
        "new_target_path": [
          "13 - 10 = 3 (left: 3 4 12)3 * 4 = 12 (left: 12 12)",
          "13 - 10 = 3 (left: 3 4 12)4 - 3 = 1 (left: 1 12)",
          "13 - 10 = 3 (left: 3 4 12)12 - 4 = 8 (left: 3 8)"
        ]
      },
      {
        "step": 3,
        "generated_samples": [
          "13 - 10 = 3 (left: 3 4 12)3 * 4 = 12 (left: 12 12)12 + 12 = 24 (left: 24)",
          "13 - 10 = 3 (left: 3 4 12)3 * 4 = 12 (left: 12 12)12 - 12 = 0 (left: 0)",
          "13 - 10 = 3 (left: 3 4 12)3 * 4 = 12 (left: 12 12)12 * 12 = 144 (left: 144)",
          "13 - 10 = 3 (left: 3 4 12)3 * 4 = 12 (left: 12 12)12 / 12 = 1 (left: 1)",
          "13 - 10 = 3 (left: 3 4 12)3 * 4 = 12 (left: 12 12)12 / 1 = 12 (left: 12)",
          "13 - 10 = 3 (left: 3 4 12)4 - 3 = 1 (left: 1 12)1 + 12 = 13 (left: 13)",
          "13 - 10 = 3 (left: 3 4 12)4 - 3 = 1 (left: 1 12)12 - 1 = 11 (left: 11)",
          "13 - 10 = 3 (left: 3 4 12)4 - 3 = 1 (left: 1 12)1 * 12 = 12 (left: 12)",
          "13 - 10 = 3 (left: 3 4 12)4 - 3 = 1 (left: 1 12)12 / 1 = 12 (left: 12)",
          "13 - 10 = 3 (left: 3 4 12)4 - 3 = 1 (left: 1 12)12 + 1 = 13 (left: 13)",
          "13 - 10 = 3 (left: 3 4 12)12 - 4 = 8 (left: 3 8)8 * 3 = 24 (left: 24)",
          "13 - 10 = 3 (left: 3 4 12)12 - 4 = 8 (left: 3 8)8 + 3 = 11 (left: 11)",
          "13 - 10 = 3 (left: 3 4 12)12 - 4 = 8 (left: 3 8)8 - 3 = 5 (left: 5)",
          "13 - 10 = 3 (left: 3 4 12)12 - 4 = 8 (left: 3 8)3 / 8 = 0.375 (left: 0.375)",
          "13 - 10 = 3 (left: 3 4 12)12 - 4 = 8 (left: 3 8)8 / 3 = 2.666 (left: 2.666)"
        ],
        "candidate_input_list": [
          "[24]",
          "[0]",
          "[144]",
          "[1]",
          "[12]",
          "[13]",
          "[11]",
          "[12]",
          "[12]",
          "[13]",
          "[24]",
          "[11]",
          "[5]",
          "[0.375]",
          "[2.666]"
        ],
        "candidate_scores": [
          10,
          0.01,
          0,
          0,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          10,
          0.01,
          0.01,
          0,
          0
        ],
        "new_target_input": [
          "[24]",
          "[24]",
          "[0]"
        ],
        "new_target_path": [
          "13 - 10 = 3 (left: 3 4 12)3 * 4 = 12 (left: 12 12)12 + 12 = 24 (left: 24)",
          "13 - 10 = 3 (left: 3 4 12)12 - 4 = 8 (left: 3 8)8 * 3 = 24 (left: 24)",
          "13 - 10 = 3 (left: 3 4 12)3 * 4 = 12 (left: 12 12)12 - 12 = 0 (left: 0)"
        ]
      }
    ],
    "final_score": "passed"
  },
  {
    "index": 4,
    "input": "2 3 10 12",
    "steps": [
      {
        "step": 1,
        "generated_samples": [
          "12 / 2 = 6 (left: 3 6 10)",
          "12 - 10 = 2 (left: 2 2 3)",
          "2 * 12 = 24 (left: 3 10 24)",
          "10 + 12 = 22 (left: 2 3 22)",
          "3 * 10 = 30 (left: 2 12 30)"
        ],
        "candidate_input_list": [
          "[3, 6, 10]",
          "[2, 2, 3]",
          "[3, 10, 24]",
          "[2, 3, 22]",
          "[2, 12, 30]"
        ],
        "candidate_scores": [
          10,
          0,
          0.01,
          1,
          10
        ],
        "new_target_input": [
          "[3, 6, 10]",
          "[2, 12, 30]",
          "[2, 3, 22]"
        ],
        "new_target_path": [
          "12 / 2 = 6 (left: 3 6 10)",
          "3 * 10 = 30 (left: 2 12 30)",
          "10 + 12 = 22 (left: 2 3 22)"
        ]
      },
      {
        "step": 2,
        "generated_samples": [
          "12 / 2 = 6 (left: 3 6 10)6 / 3 = 2 (left: 2 10)",
          "12 / 2 = 6 (left: 3 6 10)10 - 6 = 4 (left: 3 4)",
          "12 / 2 = 6 (left: 3 6 10)6 + 3 = 9 (left: 9 10)",
          "12 / 2 = 6 (left: 3 6 10)10 - 3 = 7 (left: 6 7)",
          "12 / 2 = 6 (left: 3 6 10)3 * 6 = 18 (left: 10 18)",
          "3 * 10 = 30 (left: 2 12 30)30 / 2 = 15 (left: 12 15)",
          "3 * 10 = 30 (left: 2 12 30)12 * 2 = 24 (left: 24 30)",
          "3 * 10 = 30 (left: 2 12 30)30 - 12 = 18 (left: 2 18)",
          "3 * 10 = 30 (left: 2 12 30)30 + 2 = 32 (left: 12 32)",
          "3 * 10 = 30 (left: 2 12 30)30 / 12 = 2.5 (left: 2 2.5)",
          "10 + 12 = 22 (left: 2 3 22)3 + 2 = 5 (left: 5 22)",
          "10 + 12 = 22 (left: 2 3 22)22 / 2 = 11 (left: 3 11)",
          "10 + 12 = 22 (left: 2 3 22)2 * 3 = 6 (left: 6 22)",
          "10 + 12 = 22 (left: 2 3 22)22 - 3 = 19 (left: 2 19)",
          "10 + 12 = 22 (left: 2 3 22)3 - 2 = 1 (left: 1 22)"
        ],
        "candidate_input_list": [
          "[2, 10]",
          "[3, 4]",
          "[9, 10]",
          "[6, 7]",
          "[10, 18]",
          "[12, 15]",
          "[24, 30]",
          "[2, 18]",
          "[12, 32]",
          "[2, 2.5]",
          "[5, 22]",
          "[3, 11]",
          "[6, 22]",
          "[2, 19]",
          "[1, 22]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0,
          0,
          0
        ],
        "new_target_input": [
          "[2, 10]",
          "[3, 4]",
          "[9, 10]"
        ],
        "new_target_path": [
          "12 / 2 = 6 (left: 3 6 10)6 / 3 = 2 (left: 2 10)",
          "12 / 2 = 6 (left: 3 6 10)10 - 6 = 4 (left: 3 4)",
          "12 / 2 = 6 (left: 3 6 10)6 + 3 = 9 (left: 9 10)"
        ]
      },
      {
        "step": 3,
        "generated_samples": [
          "12 / 2 = 6 (left: 3 6 10)6 / 3 = 2 (left: 2 10)2 + 10 = 12 (left: 12)",
          "12 / 2 = 6 (left: 3 6 10)6 / 3 = 2 (left: 2 10)10 - 2 = 8 (left: 8)",
          "12 / 2 = 6 (left: 3 6 10)6 / 3 = 2 (left: 2 10)2 * 10 = 20 (left: 20)",
          "12 / 2 = 6 (left: 3 6 10)6 / 3 = 2 (left: 2 10)10 / 2 = 5 (left: 5)",
          "12 / 2 = 6 (left: 3 6 10)6 / 3 = 2 (left: 2 10)2 / 10 = 0.2 (left: 0.2)",
          "12 / 2 = 6 (left: 3 6 10)10 - 6 = 4 (left: 3 4)4 * 3 = 12 (left: 12)",
          "12 / 2 = 6 (left: 3 6 10)10 - 6 = 4 (left: 3 4)4 + 3 = 7 (left: 7)",
          "12 / 2 = 6 (left: 3 6 10)10 - 6 = 4 (left: 3 4)4 - 3 = 1 (left: 1)",
          "12 / 2 = 6 (left: 3 6 10)6 + 3 = 9 (left: 9 10)9 + 10 = 19 (left: 19)",
          "12 / 2 = 6 (left: 3 6 10)6 + 3 = 9 (left: 9 10)10 - 9 = 1 (left: 1)",
          "12 / 2 = 6 (left: 3 6 10)6 + 3 = 9 (left: 9 10)9 * 10 = 90 (left: 90)"
        ],
        "candidate_input_list": [
          "[12]",
          "[8]",
          "[20]",
          "[5]",
          "[0.2]",
          "[12]",
          "[7]",
          "[1]",
          "[19]",
          "[1]",
          "[90]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0
        ],
        "new_target_input": [
          "[12]",
          "[8]",
          "[20]"
        ],
        "new_target_path": [
          "12 / 2 = 6 (left: 3 6 10)6 / 3 = 2 (left: 2 10)2 + 10 = 12 (left: 12)",
          "12 / 2 = 6 (left: 3 6 10)6 / 3 = 2 (left: 2 10)10 - 2 = 8 (left: 8)",
          "12 / 2 = 6 (left: 3 6 10)6 / 3 = 2 (left: 2 10)2 * 10 = 20 (left: 20)"
        ]
      }
    ],
    "final_score": "failed"
  },
  {
    "index": 5,
    "input": "3 4 6 6",
    "steps": [
      {
        "step": 1,
        "generated_samples": [
          "6 / 3 = 2 (left: 2 4 6)",
          "6 - 4 = 2 (left: 2 3 6)",
          "6 * 4 = 24 (left: 3 6 24)",
          "4 + 6 = 10 (left: 3 6 10)",
          "6 - 3 = 3 (left: 3 4 6)"
        ],
        "candidate_input_list": [
          "[2, 4, 6]",
          "[2, 3, 6]",
          "[3, 6, 24]",
          "[3, 6, 10]",
          "[3, 4, 6]"
        ],
        "candidate_scores": [
          10,
          10,
          0.01,
          0,
          10
        ],
        "new_target_input": [
          "[2, 4, 6]",
          "[2, 3, 6]",
          "[3, 4, 6]"
        ],
        "new_target_path": [
          "6 / 3 = 2 (left: 2 4 6)",
          "6 - 4 = 2 (left: 2 3 6)",
          "6 - 3 = 3 (left: 3 4 6)"
        ]
      },
      {
        "step": 2,
        "generated_samples": [
          "6 / 3 = 2 (left: 2 4 6)6 / 2 = 3 (left: 3 4)",
          "6 / 3 = 2 (left: 2 4 6)6 - 4 = 2 (left: 2 2)",
          "6 / 3 = 2 (left: 2 4 6)2 * 4 = 8 (left: 6 8)",
          "6 / 3 = 2 (left: 2 4 6)6 * 4 = 24 (left: 2 24)",
          "6 / 3 = 2 (left: 2 4 6)6 + 4 = 10 (left: 2 10)",
          "6 - 4 = 2 (left: 2 3 6)6 / 3 = 2 (left: 2 2)",
          "6 - 4 = 2 (left: 2 3 6)2 * 3 = 6 (left: 6 6)",
          "6 - 4 = 2 (left: 2 3 6)3 - 2 = 1 (left: 1 6)",
          "6 - 4 = 2 (left: 2 3 6)6 + 2 = 8 (left: 3 8)",
          "6 - 4 = 2 (left: 2 3 6)6 - 3 = 3 (left: 2 3)",
          "6 - 3 = 3 (left: 3 4 6)6 / 3 = 2 (left: 2 4)",
          "6 - 3 = 3 (left: 3 4 6)6 - 4 = 2 (left: 2 3)",
          "6 - 3 = 3 (left: 3 4 6)4 * 6 = 24 (left: 3 24)",
          "6 - 3 = 3 (left: 3 4 6)6 + 4 = 10 (left: 3 10)",
          "6 - 3 = 3 (left: 3 4 6)4 * 3 = 12 (left: 6 12)"
        ],
        "candidate_input_list": [
          "[3, 4]",
          "[2, 2]",
          "[6, 8]",
          "[2, 24]",
          "[2, 10]",
          "[2, 2]",
          "[6, 6]",
          "[1, 6]",
          "[3, 8]",
          "[2, 3]",
          "[2, 4]",
          "[2, 3]",
          "[3, 24]",
          "[3, 10]",
          "[6, 12]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          0.01,
          10,
          0.01,
          0.01,
          0.01,
          0.01,
          10,
          0.01,
          0.01,
          0.01,
          0,
          0,
          0
        ],
        "new_target_input": [
          "[2, 24]",
          "[3, 8]",
          "[3, 4]"
        ],
        "new_target_path": [
          "6 / 3 = 2 (left: 2 4 6)6 * 4 = 24 (left: 2 24)",
          "6 - 4 = 2 (left: 2 3 6)6 + 2 = 8 (left: 3 8)",
          "6 / 3 = 2 (left: 2 4 6)6 / 2 = 3 (left: 3 4)"
        ]
      },
      {
        "step": 3,
        "generated_samples": [
          "6 / 3 = 2 (left: 2 4 6)6 * 4 = 24 (left: 2 24)24 / 2 = 12 (left: 12)",
          "6 / 3 = 2 (left: 2 4 6)6 * 4 = 24 (left: 2 24)24 + 2 = 26 (left: 26)",
          "6 / 3 = 2 (left: 2 4 6)6 * 4 = 24 (left: 2 24)24 - 2 = 22 (left: 22)",
          "6 / 3 = 2 (left: 2 4 6)6 * 4 = 24 (left: 2 24)2 * 24 = 48 (left: 48)",
          "6 / 3 = 2 (left: 2 4 6)6 * 4 = 24 (left: 2 24)24 / 2 = 12 (left: 12)",
          "6 - 4 = 2 (left: 2 3 6)6 + 2 = 8 (left: 3 8)8 * 3 = 24 (left: 24)",
          "6 - 4 = 2 (left: 2 3 6)6 + 2 = 8 (left: 3 8)8 + 3 = 11 (left: 11)",
          "6 - 4 = 2 (left: 2 3 6)6 + 2 = 8 (left: 3 8)8 - 3 = 5 (left: 5)",
          "6 - 4 = 2 (left: 2 3 6)6 + 2 = 8 (left: 3 8)3 / 8 = 0.375 (left: 0.375)",
          "6 - 4 = 2 (left: 2 3 6)6 + 2 = 8 (left: 3 8)8 / 3 = 2.666... (left: 2.666...)",
          "6 / 3 = 2 (left: 2 4 6)6 / 2 = 3 (left: 3 4)4 * 3 = 12 (left: 12)",
          "6 / 3 = 2 (left: 2 4 6)6 / 2 = 3 (left: 3 4)4 + 3 = 7 (left: 7)",
          "6 / 3 = 2 (left: 2 4 6)6 / 2 = 3 (left: 3 4)4 - 3 = 1 (left: 1)"
        ],
        "candidate_input_list": [
          "[12]",
          "[26]",
          "[22]",
          "[48]",
          "[12]",
          "[24]",
          "[11]",
          "[5]",
          "[0.375]",
          "[2.666]",
          "[12]",
          "[7]",
          "[1]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          10,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0
        ],
        "new_target_input": [
          "[24]",
          "[12]",
          "[26]"
        ],
        "new_target_path": [
          "6 - 4 = 2 (left: 2 3 6)6 + 2 = 8 (left: 3 8)8 * 3 = 24 (left: 24)",
          "6 / 3 = 2 (left: 2 4 6)6 * 4 = 24 (left: 2 24)24 / 2 = 12 (left: 12)",
          "6 / 3 = 2 (left: 2 4 6)6 * 4 = 24 (left: 2 24)24 + 2 = 26 (left: 26)"
        ]
      }
    ],
    "final_score": "passed"
  },
  {
    "index": 6,
    "input": "2 5 5 7",
    "steps": [
      {
        "step": 1,
        "generated_samples": [
          "5 * 5 = 25 (left: 2 7 25)",
          "7 - 5 = 2 (left: 2 2 5)",
          "7 + 5 = 12 (left: 2 5 12)",
          "5 + 2 = 7 (left: 5 7 7)",
          "5 - 2 = 3 (left: 3 5 7)"
        ],
        "candidate_input_list": [
          "[2, 7, 25]",
          "[2, 2, 5]",
          "[2, 5, 12]",
          "[5, 7, 7]",
          "[3, 5, 7]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          0.01,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[2, 7, 25]",
          "[2, 2, 5]",
          "[2, 5, 12]"
        ],
        "new_target_path": [
          "5 * 5 = 25 (left: 2 7 25)",
          "7 - 5 = 2 (left: 2 2 5)",
          "7 + 5 = 12 (left: 2 5 12)"
        ]
      },
      {
        "step": 2,
        "generated_samples": [
          "5 * 5 = 25 (left: 2 7 25)25 - 7 = 18 (left: 2 18)",
          "5 * 5 = 25 (left: 2 7 25)7 - 2 = 5 (left: 5 25)",
          "5 * 5 = 25 (left: 2 7 25)2 * 7 = 14 (left: 14 25)",
          "5 * 5 = 25 (left: 2 7 25)25 + 2 = 27 (left: 7 27)",
          "7 - 5 = 2 (left: 2 2 5)2 * 5 = 10 (left: 2 10)",
          "7 - 5 = 2 (left: 2 2 5)5 - 2 = 3 (left: 2 3)",
          "7 - 5 = 2 (left: 2 2 5)2 + 2 = 4 (left: 4 5)",
          "7 - 5 = 2 (left: 2 2 5)5 + 2 = 7 (left: 2 7)",
          "7 - 5 = 2 (left: 2 2 5)5 * 2 = 10 (left: 2 10)",
          "7 + 5 = 12 (left: 2 5 12)12 / 2 = 6 (left: 5 6)",
          "7 + 5 = 12 (left: 2 5 12)5 * 2 = 10 (left: 10 12)",
          "7 + 5 = 12 (left: 2 5 12)12 + 5 = 17 (left: 2 17)",
          "7 + 5 = 12 (left: 2 5 12)12 - 5 = 7 (left: 2 7)",
          "7 + 5 = 12 (left: 2 5 12)12 - 2 = 10 (left: 5 10)"
        ],
        "candidate_input_list": [
          "[2, 18]",
          "[5, 25]",
          "[14, 25]",
          "[7, 27]",
          "[2, 10]",
          "[2, 3]",
          "[4, 5]",
          "[2, 7]",
          "[2, 10]",
          "[5, 6]",
          "[10, 12]",
          "[2, 17]",
          "[2, 7]",
          "[5, 10]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0,
          0.01,
          0.01,
          0
        ],
        "new_target_input": [
          "[2, 18]",
          "[5, 25]",
          "[14, 25]"
        ],
        "new_target_path": [
          "5 * 5 = 25 (left: 2 7 25)25 - 7 = 18 (left: 2 18)",
          "5 * 5 = 25 (left: 2 7 25)7 - 2 = 5 (left: 5 25)",
          "5 * 5 = 25 (left: 2 7 25)2 * 7 = 14 (left: 14 25)"
        ]
      },
      {
        "step": 3,
        "generated_samples": [
          "5 * 5 = 25 (left: 2 7 25)25 - 7 = 18 (left: 2 18)2 * 18 = 36 (left: 36)",
          "5 * 5 = 25 (left: 2 7 25)25 - 7 = 18 (left: 2 18)18 / 2 = 9 (left: 9)",
          "5 * 5 = 25 (left: 2 7 25)25 - 7 = 18 (left: 2 18)18 + 2 = 20 (left: 20)",
          "5 * 5 = 25 (left: 2 7 25)25 - 7 = 18 (left: 2 18)18 - 2 = 16 (left: 16)",
          "5 * 5 = 25 (left: 2 7 25)7 - 2 = 5 (left: 5 25)25 / 5 = 5 (left: 5)",
          "5 * 5 = 25 (left: 2 7 25)7 - 2 = 5 (left: 5 25)5 * 5 = 25 (left: 25)",
          "5 * 5 = 25 (left: 2 7 25)7 - 2 = 5 (left: 5 25)25 - 5 = 20 (left: 20)",
          "5 * 5 = 25 (left: 2 7 25)7 - 2 = 5 (left: 5 25)5 + 25 = 30 (left: 30)",
          "5 * 5 = 25 (left: 2 7 25)2 * 7 = 14 (left: 14 25)25 - 14 = 11 (left: 11)",
          "5 * 5 = 25 (left: 2 7 25)2 * 7 = 14 (left: 14 25)14 + 25 = 39 (left: 39)",
          "5 * 5 = 25 (left: 2 7 25)2 * 7 = 14 (left: 14 25)14 * 25 = 350 (left: 350)"
        ],
        "candidate_input_list": [
          "[36]",
          "[9]",
          "[20]",
          "[16]",
          "[5]",
          "[25]",
          "[20]",
          "[30]",
          "[11]",
          "[39]",
          "[350]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[36]",
          "[9]",
          "[20]"
        ],
        "new_target_path": [
          "5 * 5 = 25 (left: 2 7 25)25 - 7 = 18 (left: 2 18)2 * 18 = 36 (left: 36)",
          "5 * 5 = 25 (left: 2 7 25)25 - 7 = 18 (left: 2 18)18 / 2 = 9 (left: 9)",
          "5 * 5 = 25 (left: 2 7 25)25 - 7 = 18 (left: 2 18)18 + 2 = 20 (left: 20)"
        ]
      }
    ],
    "final_score": "failed"
  },
  {
    "index": 7,
    "input": "4 10 11 13",
    "steps": [
      {
        "step": 1,
        "generated_samples": [
          "10 + 11 = 21 (left: 4 13 21)",
          "13 - 11 = 2 (left: 2 4 10)",
          "13 - 10 = 3 (left: 3 4 11)",
          "4 * 10 = 40 (left: 11 13 40)",
          "11 + 13 = 24 (left: 4 24)"
        ],
        "candidate_input_list": [
          "[4, 13, 21]",
          "[2, 4, 10]",
          "[3, 4, 11]",
          "[11, 13, 40]",
          "[4, 24]"
        ],
        "candidate_scores": [
          0.01,
          10,
          0.01,
          0,
          10
        ],
        "new_target_input": [
          "[2, 4, 10]",
          "[4, 24]",
          "[4, 13, 21]"
        ],
        "new_target_path": [
          "13 - 11 = 2 (left: 2 4 10)",
          "11 + 13 = 24 (left: 4 24)",
          "10 + 11 = 21 (left: 4 13 21)"
        ]
      },
      {
        "step": 2,
        "generated_samples": [
          "13 - 11 = 2 (left: 2 4 10)4 * 2 = 8 (left: 8 10)",
          "13 - 11 = 2 (left: 2 4 10)10 - 4 = 6 (left: 2 6)",
          "13 - 11 = 2 (left: 2 4 10)10 / 2 = 5 (left: 4 5)",
          "13 - 11 = 2 (left: 2 4 10)2 + 4 = 6 (left: 6 10)",
          "13 - 11 = 2 (left: 2 4 10)4 + 10 = 14 (left: 2 14)",
          "11 + 13 = 24 (left: 4 24)24 / 4 = 6 (left: 6)",
          "11 + 13 = 24 (left: 4 24)4 * 24 = 96 (left: 96)",
          "11 + 13 = 24 (left: 4 24)24 + 4 = 28 (left: 28)",
          "11 + 13 = 24 (left: 4 24)24 - 4 = 20 (left: 20)",
          "10 + 11 = 21 (left: 4 13 21)13 + 4 = 17 (left: 17 21)",
          "10 + 11 = 21 (left: 4 13 21)21 - 13 = 8 (left: 4 8)",
          "10 + 11 = 21 (left: 4 13 21)21 / 4 = 5.25 (left: 5.25 13)",
          "10 + 11 = 21 (left: 4 13 21)21 + 4 = 25 (left: 13 25)",
          "10 + 11 = 21 (left: 4 13 21)21 + 13 = 34 (left: 4 34)"
        ],
        "candidate_input_list": [
          "[8, 10]",
          "[2, 6]",
          "[4, 5]",
          "[6, 10]",
          "[2, 14]",
          "[6]",
          "[96]",
          "[28]",
          "[20]",
          "[17, 21]",
          "[4, 8]",
          "[5.25, 13]",
          "[13, 25]",
          "[4, 34]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0
        ],
        "new_target_input": [
          "[8, 10]",
          "[2, 6]",
          "[4, 5]"
        ],
        "new_target_path": [
          "13 - 11 = 2 (left: 2 4 10)4 * 2 = 8 (left: 8 10)",
          "13 - 11 = 2 (left: 2 4 10)10 - 4 = 6 (left: 2 6)",
          "13 - 11 = 2 (left: 2 4 10)10 / 2 = 5 (left: 4 5)"
        ]
      },
      {
        "step": 3,
        "generated_samples": [
          "13 - 11 = 2 (left: 2 4 10)4 * 2 = 8 (left: 8 10)8 + 10 = 18 (left: 18)",
          "13 - 11 = 2 (left: 2 4 10)4 * 2 = 8 (left: 8 10)10 - 8 = 2 (left: 2)",
          "13 - 11 = 2 (left: 2 4 10)4 * 2 = 8 (left: 8 10)8 * 10 = 80 (left: 80)",
          "13 - 11 = 2 (left: 2 4 10)10 - 4 = 6 (left: 2 6)6 / 2 = 3 (left: 3)",
          "13 - 11 = 2 (left: 2 4 10)10 - 4 = 6 (left: 2 6)6 * 2 = 12 (left: 12)",
          "13 - 11 = 2 (left: 2 4 10)10 - 4 = 6 (left: 2 6)6 + 2 = 8 (left: 8)",
          "13 - 11 = 2 (left: 2 4 10)10 - 4 = 6 (left: 2 6)6 - 2 = 4 (left: 4)",
          "13 - 11 = 2 (left: 2 4 10)10 / 2 = 5 (left: 4 5)4 + 5 = 9 (left: 9)",
          "13 - 11 = 2 (left: 2 4 10)10 / 2 = 5 (left: 4 5)5 - 4 = 1 (left: 1)",
          "13 - 11 = 2 (left: 2 4 10)10 / 2 = 5 (left: 4 5)4 * 5 = 20 (left: 20)",
          "13 - 11 = 2 (left: 2 4 10)10 / 2 = 5 (left: 4 5)5 / 4 = 1.25 (left: 1.25)",
          "13 - 11 = 2 (left: 2 4 10)10 / 2 = 5 (left: 4 5)4 / 5 = 0.8 (left: 0.8)"
        ],
        "candidate_input_list": [
          "[18]",
          "[2]",
          "[80]",
          "[3]",
          "[12]",
          "[8]",
          "[4]",
          "[9]",
          "[1]",
          "[20]",
          "[1.25]",
          "[0.8]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          0.01,
          0.01,
          0,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[18]",
          "[2]",
          "[80]"
        ],
        "new_target_path": [
          "13 - 11 = 2 (left: 2 4 10)4 * 2 = 8 (left: 8 10)8 + 10 = 18 (left: 18)",
          "13 - 11 = 2 (left: 2 4 10)4 * 2 = 8 (left: 8 10)10 - 8 = 2 (left: 2)",
          "13 - 11 = 2 (left: 2 4 10)4 * 2 = 8 (left: 8 10)8 * 10 = 80 (left: 80)"
        ]
      }
    ],
    "final_score": "failed"
  },
  {
    "index": 8,
    "input": "2 6 6 7",
    "steps": [
      {
        "step": 1,
        "generated_samples": [
          "6 / 2 = 3 (left: 3 6 7)",
          "7 - 6 = 1 (left: 1 2 6)",
          "7 - 2 = 5 (left: 5 6 6)",
          "6 + 6 = 12 (left: 2 7 12)",
          "6 * 2 = 12 (left: 6 7 12)"
        ],
        "candidate_input_list": [
          "[3, 6, 7]",
          "[1, 2, 6]",
          "[5, 6, 6]",
          "[2, 7, 12]",
          "[6, 7, 12]"
        ],
        "candidate_scores": [
          10,
          0.01,
          10,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[3, 6, 7]",
          "[5, 6, 6]",
          "[1, 2, 6]"
        ],
        "new_target_path": [
          "6 / 2 = 3 (left: 3 6 7)",
          "7 - 2 = 5 (left: 5 6 6)",
          "7 - 6 = 1 (left: 1 2 6)"
        ]
      },
      {
        "step": 2,
        "generated_samples": [
          "6 / 2 = 3 (left: 3 6 7)6 / 3 = 2 (left: 2 7)",
          "6 / 2 = 3 (left: 3 6 7)7 - 3 = 4 (left: 4 6)",
          "6 / 2 = 3 (left: 3 6 7)7 - 6 = 1 (left: 1 3)",
          "6 / 2 = 3 (left: 3 6 7)6 + 3 = 9 (left: 7 9)",
          "6 / 2 = 3 (left: 3 6 7)7 * 3 = 21 (left: 6 21)",
          "7 - 2 = 5 (left: 5 6 6)6 / 5 = 1.2 (left: 1.2 6)",
          "7 - 2 = 5 (left: 5 6 6)6 - 5 = 1 (left: 1 6)",
          "7 - 2 = 5 (left: 5 6 6)5 * 6 = 30 (left: 6 30)",
          "7 - 2 = 5 (left: 5 6 6)6 + 6 = 12 (left: 5 12)",
          "7 - 2 = 5 (left: 5 6 6)6 * 6 = 36 (left: 5 36)",
          "7 - 6 = 1 (left: 1 2 6)6 / 2 = 3 (left: 1 3)",
          "7 - 6 = 1 (left: 1 2 6)2 * 6 = 12 (left: 1 12)",
          "7 - 6 = 1 (left: 1 2 6)1 + 2 = 3 (left: 3 6)",
          "7 - 6 = 1 (left: 1 2 6)6 - 2 = 4 (left: 1 4)",
          "7 - 6 = 1 (left: 1 2 6)6 + 2 = 8 (left: 1 8)"
        ],
        "candidate_input_list": [
          "[2, 7]",
          "[4, 6]",
          "[1, 3]",
          "[7, 9]",
          "[6, 21]",
          "[1.2, 6]",
          "[1, 6]",
          "[6, 30]",
          "[5, 12]",
          "[5, 36]",
          "[1, 3]",
          "[1, 12]",
          "[3, 6]",
          "[1, 4]",
          "[1, 8]"
        ],
        "candidate_scores": [
          0.01,
          10,
          0.01,
          0.01,
          0.01,
          0.01,
          0,
          10,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0,
          0
        ],
        "new_target_input": [
          "[4, 6]",
          "[6, 30]",
          "[2, 7]"
        ],
        "new_target_path": [
          "6 / 2 = 3 (left: 3 6 7)7 - 3 = 4 (left: 4 6)",
          "7 - 2 = 5 (left: 5 6 6)5 * 6 = 30 (left: 6 30)",
          "6 / 2 = 3 (left: 3 6 7)6 / 3 = 2 (left: 2 7)"
        ]
      },
      {
        "step": 3,
        "generated_samples": [
          "6 / 2 = 3 (left: 3 6 7)7 - 3 = 4 (left: 4 6)4 + 6 = 10 (left: 10)",
          "6 / 2 = 3 (left: 3 6 7)7 - 3 = 4 (left: 4 6)6 - 4 = 2 (left: 2)",
          "6 / 2 = 3 (left: 3 6 7)7 - 3 = 4 (left: 4 6)4 * 6 = 24 (left: 24)",
          "6 / 2 = 3 (left: 3 6 7)7 - 3 = 4 (left: 4 6)6 / 4 = 1.5 (left: 1.5)",
          "7 - 2 = 5 (left: 5 6 6)5 * 6 = 30 (left: 6 30)6 * 30 = 180 (left: 180)",
          "7 - 2 = 5 (left: 5 6 6)5 * 6 = 30 (left: 6 30)30 / 6 = 5 (left: 5)",
          "7 - 2 = 5 (left: 5 6 6)5 * 6 = 30 (left: 6 30)30 - 6 = 24 (left: 24)",
          "7 - 2 = 5 (left: 5 6 6)5 * 6 = 30 (left: 6 30)6 + 30 = 36 (left: 36)",
          "6 / 2 = 3 (left: 3 6 7)6 / 3 = 2 (left: 2 7)7 + 2 = 9 (left: 9)",
          "6 / 2 = 3 (left: 3 6 7)6 / 3 = 2 (left: 2 7)7 - 2 = 5 (left: 5)",
          "6 / 2 = 3 (left: 3 6 7)6 / 3 = 2 (left: 2 7)2 * 7 = 14 (left: 14)"
        ],
        "candidate_input_list": [
          "[10]",
          "[2]",
          "[24]",
          "[1.5]",
          "[180]",
          "[5]",
          "[24]",
          "[36]",
          "[9]",
          "[5]",
          "[14]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          10,
          0.01,
          0.01,
          0.01,
          10,
          0.01,
          0.01,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[24]",
          "[24]",
          "[10]"
        ],
        "new_target_path": [
          "6 / 2 = 3 (left: 3 6 7)7 - 3 = 4 (left: 4 6)4 * 6 = 24 (left: 24)",
          "7 - 2 = 5 (left: 5 6 6)5 * 6 = 30 (left: 6 30)30 - 6 = 24 (left: 24)",
          "6 / 2 = 3 (left: 3 6 7)7 - 3 = 4 (left: 4 6)4 + 6 = 10 (left: 10)"
        ]
      }
    ],
    "final_score": "passed"
  },
  {
    "index": 9,
    "input": "5 7 9 10",
    "steps": [
      {
        "step": 1,
        "generated_samples": [
          "7 - 5 = 2 (left: 2 9 10)",
          "7 + 5 = 12 (left: 9 10 12)",
          "5 * 5 = 25 (left: 7 9 25)",
          "10 - 5 = 5 (left: 5 7 9)",
          "10 - 7 = 3 (left: 3 5 9)"
        ],
        "candidate_input_list": [
          "[2, 9, 10]",
          "[9, 10, 12]",
          "[7, 9, 25]",
          "[5, 7, 9]",
          "[3, 5, 9]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          0.01,
          0.01,
          10
        ],
        "new_target_input": [
          "[3, 5, 9]",
          "[2, 9, 10]",
          "[9, 10, 12]"
        ],
        "new_target_path": [
          "10 - 7 = 3 (left: 3 5 9)",
          "7 - 5 = 2 (left: 2 9 10)",
          "7 + 5 = 12 (left: 9 10 12)"
        ]
      },
      {
        "step": 2,
        "generated_samples": [
          "10 - 7 = 3 (left: 3 5 9)5 + 3 = 8 (left: 8 9)",
          "10 - 7 = 3 (left: 3 5 9)9 - 5 = 4 (left: 3 4)",
          "10 - 7 = 3 (left: 3 5 9)9 - 3 = 6 (left: 5 6)",
          "10 - 7 = 3 (left: 3 5 9)5 * 3 = 15 (left: 9 15)",
          "10 - 7 = 3 (left: 3 5 9)9 / 3 = 3 (left: 3 5)",
          "7 - 5 = 2 (left: 2 9 10)2 * 10 = 20 (left: 9 20)",
          "7 - 5 = 2 (left: 2 9 10)10 - 2 = 8 (left: 8 9)",
          "7 - 5 = 2 (left: 2 9 10)9 + 2 = 11 (left: 10 11)",
          "7 - 5 = 2 (left: 2 9 10)9 + 10 = 19 (left: 2 19)",
          "7 - 5 = 2 (left: 2 9 10)9 - 2 = 7 (left: 7 10)",
          "7 + 5 = 12 (left: 9 10 12)12 / 10 = 1.2 (left: 1.2 9)",
          "7 + 5 = 12 (left: 9 10 12)12 - 10 = 2 (left: 2 9)",
          "7 + 5 = 12 (left: 9 10 12)12 - 9 = 3 (left: 3 10)",
          "7 + 5 = 12 (left: 9 10 12)10 - 9 = 1 (left: 1 12)",
          "7 + 5 = 12 (left: 9 10 12)12 + 10 = 22 (left: 9 22)"
        ],
        "candidate_input_list": [
          "[8, 9]",
          "[3, 4]",
          "[5, 6]",
          "[9, 15]",
          "[3, 5]",
          "[9, 20]",
          "[8, 9]",
          "[10, 11]",
          "[2, 19]",
          "[7, 10]",
          "[1.2, 9]",
          "[2, 9]",
          "[3, 10]",
          "[1, 12]",
          "[9, 22]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          0.01,
          10,
          0.01,
          0.01,
          1,
          0.01,
          1,
          0.01,
          0.01,
          0.01,
          0.01,
          0,
          0
        ],
        "new_target_input": [
          "[9, 15]",
          "[8, 9]",
          "[2, 19]"
        ],
        "new_target_path": [
          "10 - 7 = 3 (left: 3 5 9)5 * 3 = 15 (left: 9 15)",
          "7 - 5 = 2 (left: 2 9 10)10 - 2 = 8 (left: 8 9)",
          "7 - 5 = 2 (left: 2 9 10)9 + 10 = 19 (left: 2 19)"
        ]
      },
      {
        "step": 3,
        "generated_samples": [
          "10 - 7 = 3 (left: 3 5 9)5 * 3 = 15 (left: 9 15)9 + 15 = 24 (left: 24)",
          "10 - 7 = 3 (left: 3 5 9)5 * 3 = 15 (left: 9 15)15 - 9 = 6 (left: 6)",
          "10 - 7 = 3 (left: 3 5 9)5 * 3 = 15 (left: 9 15)9 * 15 = 135 (left: 135)",
          "10 - 7 = 3 (left: 3 5 9)5 * 3 = 15 (left: 9 15)15 / 9 = 1.667 (left: 1.667)",
          "7 - 5 = 2 (left: 2 9 10)10 - 2 = 8 (left: 8 9)8 + 9 = 17 (left: 17)",
          "7 - 5 = 2 (left: 2 9 10)10 - 2 = 8 (left: 8 9)8 * 9 = 72 (left: 72)",
          "7 - 5 = 2 (left: 2 9 10)10 - 2 = 8 (left: 8 9)9 - 8 = 1 (left: 1)",
          "7 - 5 = 2 (left: 2 9 10)9 + 10 = 19 (left: 2 19)2 + 19 = 21 (left: 21)",
          "7 - 5 = 2 (left: 2 9 10)9 + 10 = 19 (left: 2 19)19 - 2 = 17 (left: 17)",
          "7 - 5 = 2 (left: 2 9 10)9 + 10 = 19 (left: 2 19)2 * 19 = 38 (left: 38)"
        ],
        "candidate_input_list": [
          "[24]",
          "[6]",
          "[135]",
          "[1.667]",
          "[17]",
          "[72]",
          "[1]",
          "[21]",
          "[17]",
          "[38]"
        ],
        "candidate_scores": [
          10,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[24]",
          "[6]",
          "[135]"
        ],
        "new_target_path": [
          "10 - 7 = 3 (left: 3 5 9)5 * 3 = 15 (left: 9 15)9 + 15 = 24 (left: 24)",
          "10 - 7 = 3 (left: 3 5 9)5 * 3 = 15 (left: 9 15)15 - 9 = 6 (left: 6)",
          "10 - 7 = 3 (left: 3 5 9)5 * 3 = 15 (left: 9 15)9 * 15 = 135 (left: 135)"
        ]
      }
    ],
    "final_score": "passed"
  },
  {
    "index": 10,
    "input": "6 6 7 11",
    "steps": [
      {
        "step": 1,
        "generated_samples": [
          "6 + 6 = 12 (left: 7 11 12)",
          "6 * 6 = 36 (left: 7 11 36)",
          "11 + 7 = 18 (left: 6 6 18)",
          "7 - 6 = 1 (left: 1 6 11)",
          "11 - 7 = 4 (left: 4 6 6)"
        ],
        "candidate_input_list": [
          "[7, 11, 12]",
          "[7, 11, 36]",
          "[6, 6, 18]",
          "[1, 6, 11]",
          "[4, 6, 6]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          0.01,
          1,
          0.01
        ],
        "new_target_input": [
          "[1, 6, 11]",
          "[7, 11, 12]",
          "[7, 11, 36]"
        ],
        "new_target_path": [
          "7 - 6 = 1 (left: 1 6 11)",
          "6 + 6 = 12 (left: 7 11 12)",
          "6 * 6 = 36 (left: 7 11 36)"
        ]
      },
      {
        "step": 2,
        "generated_samples": [
          "7 - 6 = 1 (left: 1 6 11)6 - 1 = 5 (left: 5 11)",
          "7 - 6 = 1 (left: 1 6 11)6 + 1 = 7 (left: 7 11)",
          "7 - 6 = 1 (left: 1 6 11)6 * 1 = 6 (left: 6 11)",
          "7 - 6 = 1 (left: 1 6 11)11 - 1 = 10 (left: 6 10)",
          "7 - 6 = 1 (left: 1 6 11)11 + 1 = 12 (left: 6 12)",
          "6 + 6 = 12 (left: 7 11 12)12 / 11 = 1.09 (left: 7 1.09)",
          "6 + 6 = 12 (left: 7 11 12)12 / 7 = 1.71 (left: 11 1.71)",
          "6 + 6 = 12 (left: 7 11 12)7 + 11 = 18 (left: 12 18)",
          "6 + 6 = 12 (left: 7 11 12)11 - 7 = 4 (left: 4 12)",
          "6 + 6 = 12 (left: 7 11 12)7 * 11 = 77 (left: 12 77)",
          "6 * 6 = 36 (left: 7 11 36)36 / (11 - 7) = 9 (left: 7 11 9)",
          "6 * 6 = 36 (left: 7 11 36)7 + 11 = 18 (left: 18 36)"
        ],
        "candidate_input_list": [
          "[5, 11]",
          "[7, 11]",
          "[6, 11]",
          "[6, 10]",
          "[6, 12]",
          "[7, 1.09]",
          "[11, 1.71]",
          "[12, 18]",
          "[4, 12]",
          "[12, 77]",
          "[7, 11, 9]",
          "[18, 36]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          0,
          1,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[6, 10]",
          "[5, 11]",
          "[7, 11]"
        ],
        "new_target_path": [
          "7 - 6 = 1 (left: 1 6 11)11 - 1 = 10 (left: 6 10)",
          "7 - 6 = 1 (left: 1 6 11)6 - 1 = 5 (left: 5 11)",
          "7 - 6 = 1 (left: 1 6 11)6 + 1 = 7 (left: 7 11)"
        ]
      },
      {
        "step": 3,
        "generated_samples": [
          "7 - 6 = 1 (left: 1 6 11)11 - 1 = 10 (left: 6 10)6 + 10 = 16 (left: 16)",
          "7 - 6 = 1 (left: 1 6 11)11 - 1 = 10 (left: 6 10)10 - 6 = 4 (left: 4)",
          "7 - 6 = 1 (left: 1 6 11)11 - 1 = 10 (left: 6 10)6 * 10 = 60 (left: 60)",
          "7 - 6 = 1 (left: 1 6 11)6 - 1 = 5 (left: 5 11)5 + 11 = 16 (left: 16)",
          "7 - 6 = 1 (left: 1 6 11)6 - 1 = 5 (left: 5 11)11 - 5 = 6 (left: 6)",
          "7 - 6 = 1 (left: 1 6 11)6 - 1 = 5 (left: 5 11)5 * 11 = 55 (left: 55)",
          "7 - 6 = 1 (left: 1 6 11)6 + 1 = 7 (left: 7 11)7 + 11 = 18 (left: 18)",
          "7 - 6 = 1 (left: 1 6 11)6 + 1 = 7 (left: 7 11)11 - 7 = 4 (left: 4)",
          "7 - 6 = 1 (left: 1 6 11)6 + 1 = 7 (left: 7 11)7 * 11 = 77 (left: 77)"
        ],
        "candidate_input_list": [
          "[16]",
          "[4]",
          "[60]",
          "[16]",
          "[6]",
          "[55]",
          "[18]",
          "[4]",
          "[77]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[16]",
          "[4]",
          "[60]"
        ],
        "new_target_path": [
          "7 - 6 = 1 (left: 1 6 11)11 - 1 = 10 (left: 6 10)6 + 10 = 16 (left: 16)",
          "7 - 6 = 1 (left: 1 6 11)11 - 1 = 10 (left: 6 10)10 - 6 = 4 (left: 4)",
          "7 - 6 = 1 (left: 1 6 11)11 - 1 = 10 (left: 6 10)6 * 10 = 60 (left: 60)"
        ]
      }
    ],
    "final_score": "failed"
  },
  {
    "index": 11,
    "input": "2 2 5 9",
    "steps": [
      {
        "step": 1,
        "generated_samples": [
          "5 * 2 = 10 (left: 2 9 10)",
          "9 - 5 = 4 (left: 2 2 4)",
          "2 * 9 = 18 (left: 2 5 18)",
          "9 + 5 = 14 (left: 2 2 14)",
          "2 * 2 = 4 (left: 4 5 9)"
        ],
        "candidate_input_list": [
          "[2, 9, 10]",
          "[2, 2, 4]",
          "[2, 5, 18]",
          "[2, 2, 14]",
          "[4, 5, 9]"
        ],
        "candidate_scores": [
          0,
          0.01,
          0.01,
          10,
          0.01
        ],
        "new_target_input": [
          "[2, 2, 14]",
          "[2, 2, 4]",
          "[2, 5, 18]"
        ],
        "new_target_path": [
          "9 + 5 = 14 (left: 2 2 14)",
          "9 - 5 = 4 (left: 2 2 4)",
          "2 * 9 = 18 (left: 2 5 18)"
        ]
      },
      {
        "step": 2,
        "generated_samples": [
          "9 + 5 = 14 (left: 2 2 14)2 + 2 = 4 (left: 4 14)",
          "9 + 5 = 14 (left: 2 2 14)2 * 2 = 4 (left: 4 14)",
          "9 + 5 = 14 (left: 2 2 14)14 / 2 = 7 (left: 2 7)",
          "9 + 5 = 14 (left: 2 2 14)14 - 2 = 12 (left: 2 12)",
          "9 + 5 = 14 (left: 2 2 14)14 + 2 = 16 (left: 2 16)",
          "9 - 5 = 4 (left: 2 2 4)4 / 2 = 2 (left: 2 2)",
          "9 - 5 = 4 (left: 2 2 4)2 + 2 = 4 (left: 4 4)",
          "9 - 5 = 4 (left: 2 2 4)2 * 2 = 4 (left: 4 4)",
          "9 - 5 = 4 (left: 2 2 4)4 - 2 = 2 (left: 2 2)",
          "9 - 5 = 4 (left: 2 2 4)2 / 2 = 1 (left: 1 4)",
          "2 * 9 = 18 (left: 2 5 18)5 + 2 = 7 (left: 7 18)",
          "2 * 9 = 18 (left: 2 5 18)2 * 5 = 10 (left: 10 18)",
          "2 * 9 = 18 (left: 2 5 18)18 / 2 = 9 (left: 5 9)",
          "2 * 9 = 18 (left: 2 5 18)18 + 5 = 23 (left: 2 23)",
          "2 * 9 = 18 (left: 2 5 18)18 - 5 = 13 (left: 2 13)"
        ],
        "candidate_input_list": [
          "[4, 14]",
          "[4, 14]",
          "[2, 7]",
          "[2, 12]",
          "[2, 16]",
          "[2, 2]",
          "[4, 4]",
          "[4, 4]",
          "[2, 2]",
          "[1, 4]",
          "[7, 18]",
          "[10, 18]",
          "[5, 9]",
          "[2, 23]",
          "[2, 13]"
        ],
        "candidate_scores": [
          0.01,
          0,
          0.01,
          10,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0,
          0
        ],
        "new_target_input": [
          "[2, 12]",
          "[4, 14]",
          "[2, 7]"
        ],
        "new_target_path": [
          "9 + 5 = 14 (left: 2 2 14)14 - 2 = 12 (left: 2 12)",
          "9 + 5 = 14 (left: 2 2 14)2 + 2 = 4 (left: 4 14)",
          "9 + 5 = 14 (left: 2 2 14)14 / 2 = 7 (left: 2 7)"
        ]
      },
      {
        "step": 3,
        "generated_samples": [
          "9 + 5 = 14 (left: 2 2 14)14 - 2 = 12 (left: 2 12)2 * 12 = 24 (left: 24)",
          "9 + 5 = 14 (left: 2 2 14)14 - 2 = 12 (left: 2 12)12 / 2 = 6 (left: 6)",
          "9 + 5 = 14 (left: 2 2 14)14 - 2 = 12 (left: 2 12)12 + 2 = 14 (left: 14)",
          "9 + 5 = 14 (left: 2 2 14)14 - 2 = 12 (left: 2 12)12 - 2 = 10 (left: 10)",
          "9 + 5 = 14 (left: 2 2 14)14 - 2 = 12 (left: 2 12)2 + 12 = 14 (left: 14)",
          "9 + 5 = 14 (left: 2 2 14)2 + 2 = 4 (left: 4 14)4 + 14 = 18 (left: 18)",
          "9 + 5 = 14 (left: 2 2 14)2 + 2 = 4 (left: 4 14)14 - 4 = 10 (left: 10)",
          "9 + 5 = 14 (left: 2 2 14)2 + 2 = 4 (left: 4 14)4 * 14 = 56 (left: 56)",
          "9 + 5 = 14 (left: 2 2 14)2 + 2 = 4 (left: 4 14)14 / 4 = 3.5 (left: 3.5)",
          "9 + 5 = 14 (left: 2 2 14)2 + 2 = 4 (left: 4 14)14 + 4 = 18 (left: 18)",
          "9 + 5 = 14 (left: 2 2 14)14 / 2 = 7 (left: 2 7)7 - 2 = 5 (left: 5)",
          "9 + 5 = 14 (left: 2 2 14)14 / 2 = 7 (left: 2 7)2 + 7 = 9 (left: 9)",
          "9 + 5 = 14 (left: 2 2 14)14 / 2 = 7 (left: 2 7)2 * 7 = 14 (left: 14)",
          "9 + 5 = 14 (left: 2 2 14)14 / 2 = 7 (left: 2 7)7 / 2 = 3.5 (left: 3.5)",
          "9 + 5 = 14 (left: 2 2 14)14 / 2 = 7 (left: 2 7)2 / 7 = 0.2857142857142857 (left: 0.2857142857142857)"
        ],
        "candidate_input_list": [
          "[24]",
          "[6]",
          "[14]",
          "[10]",
          "[14]",
          "[18]",
          "[10]",
          "[56]",
          "[3.5]",
          "[18]",
          "[5]",
          "[9]",
          "[14]",
          "[3.5]",
          "[0.2857142857142857]"
        ],
        "candidate_scores": [
          10,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0,
          0
        ],
        "new_target_input": [
          "[24]",
          "[6]",
          "[14]"
        ],
        "new_target_path": [
          "9 + 5 = 14 (left: 2 2 14)14 - 2 = 12 (left: 2 12)2 * 12 = 24 (left: 24)",
          "9 + 5 = 14 (left: 2 2 14)14 - 2 = 12 (left: 2 12)12 / 2 = 6 (left: 6)",
          "9 + 5 = 14 (left: 2 2 14)14 - 2 = 12 (left: 2 12)12 + 2 = 14 (left: 14)"
        ]
      }
    ],
    "final_score": "passed"
  },
  {
    "index": 12,
    "input": "3 4 5 13",
    "steps": [
      {
        "step": 1,
        "generated_samples": [
          "4 * 5 = 20 (left: 3 13 20)",
          "13 - 3 = 10 (left: 4 5 10)",
          "5 + 13 = 18 (left: 3 4 18)",
          "3 * 13 = 39 (left: 4 5 39)",
          "13 - 5 = 8 (left: 3 4 8)"
        ],
        "candidate_input_list": [
          "[3, 13, 20]",
          "[4, 5, 10]",
          "[3, 4, 18]",
          "[4, 5, 39]",
          "[3, 4, 8]"
        ],
        "candidate_scores": [
          1,
          0,
          10,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[3, 4, 18]",
          "[3, 13, 20]",
          "[4, 5, 39]"
        ],
        "new_target_path": [
          "5 + 13 = 18 (left: 3 4 18)",
          "4 * 5 = 20 (left: 3 13 20)",
          "3 * 13 = 39 (left: 4 5 39)"
        ]
      },
      {
        "step": 2,
        "generated_samples": [
          "5 + 13 = 18 (left: 3 4 18)4 * 3 = 12 (left: 12 18)",
          "5 + 13 = 18 (left: 3 4 18)18 / 3 = 6 (left: 4 6)",
          "5 + 13 = 18 (left: 3 4 18)18 + 3 = 21 (left: 4 21)",
          "5 + 13 = 18 (left: 3 4 18)4 + 3 = 7 (left: 7 18)",
          "5 + 13 = 18 (left: 3 4 18)18 - 4 = 14 (left: 3 14)",
          "4 * 5 = 20 (left: 3 13 20)20 - 13 = 7 (left: 3 7)",
          "4 * 5 = 20 (left: 3 13 20)13 - 3 = 10 (left: 10 20)",
          "4 * 5 = 20 (left: 3 13 20)20 / 3 = 6.666 (left: 6.666 13)",
          "4 * 5 = 20 (left: 3 13 20)3 * 13 = 39 (left: 20 39)",
          "4 * 5 = 20 (left: 3 13 20)3 * 20 = 60 (left: 13 60)",
          "3 * 13 = 39 (left: 4 5 39)5 + 4 = 9 (left: 9 39)",
          "3 * 13 = 39 (left: 4 5 39)39 / 3 = 13 (left: 13 5)",
          "3 * 13 = 39 (left: 4 5 39)39 - 5 = 34 (left: 4 34)",
          "3 * 13 = 39 (left: 4 5 39)4 * 5 = 20 (left: 20 39)",
          "3 * 13 = 39 (left: 4 5 39)39 + 5 = 44 (left: 4 44)"
        ],
        "candidate_input_list": [
          "[12, 18]",
          "[4, 6]",
          "[4, 21]",
          "[7, 18]",
          "[3, 14]",
          "[3, 7]",
          "[10, 20]",
          "[6.666, 13]",
          "[20, 39]",
          "[13, 60]",
          "[9, 39]",
          "[13, 5]",
          "[4, 34]",
          "[20, 39]",
          "[4, 44]"
        ],
        "candidate_scores": [
          0.01,
          10,
          0.01,
          0.01,
          0,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0,
          0,
          0
        ],
        "new_target_input": [
          "[4, 6]",
          "[12, 18]",
          "[4, 21]"
        ],
        "new_target_path": [
          "5 + 13 = 18 (left: 3 4 18)18 / 3 = 6 (left: 4 6)",
          "5 + 13 = 18 (left: 3 4 18)4 * 3 = 12 (left: 12 18)",
          "5 + 13 = 18 (left: 3 4 18)18 + 3 = 21 (left: 4 21)"
        ]
      },
      {
        "step": 3,
        "generated_samples": [
          "5 + 13 = 18 (left: 3 4 18)18 / 3 = 6 (left: 4 6)4 + 6 = 10 (left: 10)",
          "5 + 13 = 18 (left: 3 4 18)18 / 3 = 6 (left: 4 6)6 - 4 = 2 (left: 2)",
          "5 + 13 = 18 (left: 3 4 18)18 / 3 = 6 (left: 4 6)4 * 6 = 24 (left: 24)",
          "5 + 13 = 18 (left: 3 4 18)4 * 3 = 12 (left: 12 18)12 + 18 = 30 (left: 30)",
          "5 + 13 = 18 (left: 3 4 18)4 * 3 = 12 (left: 12 18)18 - 12 = 6 (left: 6)",
          "5 + 13 = 18 (left: 3 4 18)4 * 3 = 12 (left: 12 18)12 * 18 = 216 (left: 216)",
          "5 + 13 = 18 (left: 3 4 18)4 * 3 = 12 (left: 12 18)18 / 12 = 1.5 (left: 1.5)",
          "5 + 13 = 18 (left: 3 4 18)4 * 3 = 12 (left: 12 18)12 / 18 = 0.666... (left: 0.666...)",
          "5 + 13 = 18 (left: 3 4 18)18 + 3 = 21 (left: 4 21)21 + 4 = 25 (left: 25)",
          "5 + 13 = 18 (left: 3 4 18)18 + 3 = 21 (left: 4 21)21 - 4 = 17 (left: 17)",
          "5 + 13 = 18 (left: 3 4 18)18 + 3 = 21 (left: 4 21)4 * 21 = 84 (left: 84)",
          "5 + 13 = 18 (left: 3 4 18)18 + 3 = 21 (left: 4 21)21 / 4 = 5.25 (left: 5.25)",
          "5 + 13 = 18 (left: 3 4 18)18 + 3 = 21 (left: 4 21)4 / 21 = 0.19 (left: 0.19)"
        ],
        "candidate_input_list": [
          "[10]",
          "[2]",
          "[24]",
          "[30]",
          "[6]",
          "[216]",
          "[1.5]",
          "[0.666]",
          "[25]",
          "[17]",
          "[84]",
          "[5.25]",
          "[0.19]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          10,
          0.01,
          0.01,
          0,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[24]",
          "[10]",
          "[2]"
        ],
        "new_target_path": [
          "5 + 13 = 18 (left: 3 4 18)18 / 3 = 6 (left: 4 6)4 * 6 = 24 (left: 24)",
          "5 + 13 = 18 (left: 3 4 18)18 / 3 = 6 (left: 4 6)4 + 6 = 10 (left: 10)",
          "5 + 13 = 18 (left: 3 4 18)18 / 3 = 6 (left: 4 6)6 - 4 = 2 (left: 2)"
        ]
      }
    ],
    "final_score": "passed"
  },
  {
    "index": 13,
    "input": "3 3 9 11",
    "steps": [
      {
        "step": 1,
        "generated_samples": [
          "3 + 3 = 6 (left: 6 9 11)",
          "11 - 3 = 8 (left: 3 8 9)",
          "3 * 9 = 27 (left: 3 11 27)",
          "11 + 3 = 14 (left: 3 9 14)",
          "9 / 3 = 3 (left: 3 3 11)"
        ],
        "candidate_input_list": [
          "[6, 9, 11]",
          "[3, 8, 9]",
          "[3, 11, 27]",
          "[3, 9, 14]",
          "[3, 3, 11]"
        ],
        "candidate_scores": [
          1,
          10,
          0.01,
          0.01,
          10
        ],
        "new_target_input": [
          "[3, 8, 9]",
          "[3, 3, 11]",
          "[6, 9, 11]"
        ],
        "new_target_path": [
          "11 - 3 = 8 (left: 3 8 9)",
          "9 / 3 = 3 (left: 3 3 11)",
          "3 + 3 = 6 (left: 6 9 11)"
        ]
      },
      {
        "step": 2,
        "generated_samples": [
          "11 - 3 = 8 (left: 3 8 9)8 * 3 = 24 (left: 9 24)",
          "11 - 3 = 8 (left: 3 8 9)9 - 3 = 6 (left: 6 8)",
          "11 - 3 = 8 (left: 3 8 9)9 + 3 = 12 (left: 8 12)",
          "11 - 3 = 8 (left: 3 8 9)9 / 3 = 3 (left: 3 8)",
          "11 - 3 = 8 (left: 3 8 9)8 + 3 = 11 (left: 9 11)",
          "9 / 3 = 3 (left: 3 3 11)3 + 3 = 6 (left: 6 11)",
          "9 / 3 = 3 (left: 3 3 11)11 - 3 = 8 (left: 3 8)",
          "9 / 3 = 3 (left: 3 3 11)3 * 11 = 33 (left: 3 33)",
          "9 / 3 = 3 (left: 3 3 11)11 + 3 = 14 (left: 3 14)",
          "9 / 3 = 3 (left: 3 3 11)3 / 3 = 1 (left: 1 11)",
          "3 + 3 = 6 (left: 6 9 11)9 - 6 = 3 (left: 3 11)",
          "3 + 3 = 6 (left: 6 9 11)6 + 9 = 15 (left: 11 15)",
          "3 + 3 = 6 (left: 6 9 11)6 * 9 = 54 (left: 11 54)",
          "3 + 3 = 6 (left: 6 9 11)11 - 9 = 2 (left: 2 6)",
          "3 + 3 = 6 (left: 6 9 11)11 - 6 = 5 (left: 5 9)"
        ],
        "candidate_input_list": [
          "[9, 24]",
          "[6, 8]",
          "[8, 12]",
          "[3, 8]",
          "[9, 11]",
          "[6, 11]",
          "[3, 8]",
          "[3, 33]",
          "[3, 14]",
          "[1, 11]",
          "[3, 11]",
          "[11, 15]",
          "[11, 54]",
          "[2, 6]",
          "[5, 9]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          0.01,
          10,
          0.01,
          0.01,
          10,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0,
          0
        ],
        "new_target_input": [
          "[3, 8]",
          "[3, 8]",
          "[9, 24]"
        ],
        "new_target_path": [
          "11 - 3 = 8 (left: 3 8 9)9 / 3 = 3 (left: 3 8)",
          "9 / 3 = 3 (left: 3 3 11)11 - 3 = 8 (left: 3 8)",
          "11 - 3 = 8 (left: 3 8 9)8 * 3 = 24 (left: 9 24)"
        ]
      },
      {
        "step": 3,
        "generated_samples": [
          "11 - 3 = 8 (left: 3 8 9)9 / 3 = 3 (left: 3 8)8 * 3 = 24 (left: 24)",
          "11 - 3 = 8 (left: 3 8 9)9 / 3 = 3 (left: 3 8)8 + 3 = 11 (left: 11)",
          "11 - 3 = 8 (left: 3 8 9)9 / 3 = 3 (left: 3 8)8 - 3 = 5 (left: 5)",
          "11 - 3 = 8 (left: 3 8 9)9 / 3 = 3 (left: 3 8)3 / 8 = 0.375 (left: 0.375)",
          "11 - 3 = 8 (left: 3 8 9)9 / 3 = 3 (left: 3 8)8 / 3 = 2.666 (left: 2.666)",
          "9 / 3 = 3 (left: 3 3 11)11 - 3 = 8 (left: 3 8)8 * 3 = 24 (left: 24)",
          "9 / 3 = 3 (left: 3 3 11)11 - 3 = 8 (left: 3 8)3 + 8 = 11 (left: 11)",
          "9 / 3 = 3 (left: 3 3 11)11 - 3 = 8 (left: 3 8)8 - 3 = 5 (left: 5)",
          "11 - 3 = 8 (left: 3 8 9)8 * 3 = 24 (left: 9 24)24 / 9 = 2.66 (left: 2.66)",
          "11 - 3 = 8 (left: 3 8 9)8 * 3 = 24 (left: 9 24)24 + 9 = 33 (left: 33)",
          "11 - 3 = 8 (left: 3 8 9)8 * 3 = 24 (left: 9 24)24 - 9 = 15 (left: 15)",
          "11 - 3 = 8 (left: 3 8 9)8 * 3 = 24 (left: 9 24)9 / 24 = 0.375 (left: 0.375)",
          "11 - 3 = 8 (left: 3 8 9)8 * 3 = 24 (left: 9 24)9 * 24 = 216 (left: 216)"
        ],
        "candidate_input_list": [
          "[24]",
          "[11]",
          "[5]",
          "[0.375]",
          "[2.666]",
          "[24]",
          "[11]",
          "[5]",
          "[2.66]",
          "[33]",
          "[15]",
          "[0.375]",
          "[216]"
        ],
        "candidate_scores": [
          10,
          0.01,
          0.01,
          0.01,
          0.01,
          10,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[24]",
          "[24]",
          "[11]"
        ],
        "new_target_path": [
          "11 - 3 = 8 (left: 3 8 9)9 / 3 = 3 (left: 3 8)8 * 3 = 24 (left: 24)",
          "9 / 3 = 3 (left: 3 3 11)11 - 3 = 8 (left: 3 8)8 * 3 = 24 (left: 24)",
          "11 - 3 = 8 (left: 3 8 9)9 / 3 = 3 (left: 3 8)8 + 3 = 11 (left: 11)"
        ]
      }
    ],
    "final_score": "passed"
  },
  {
    "index": 14,
    "input": "3 4 4 4",
    "steps": [
      {
        "step": 1,
        "generated_samples": [
          "4 * 4 = 16 (left: 3 4 16)",
          "4 + 4 = 8 (left: 3 4 8)",
          "4 - 3 = 1 (left: 1 4 4)",
          "4 / 4 = 1 (left: 1 3 4)",
          "3 * 4 = 12 (left: 4 4 12)"
        ],
        "candidate_input_list": [
          "[3, 4, 16]",
          "[3, 4, 8]",
          "[1, 4, 4]",
          "[1, 3, 4]",
          "[4, 4, 12]"
        ],
        "candidate_scores": [
          0.01,
          10,
          0,
          10,
          10
        ],
        "new_target_input": [
          "[3, 4, 8]",
          "[1, 3, 4]",
          "[4, 4, 12]"
        ],
        "new_target_path": [
          "4 + 4 = 8 (left: 3 4 8)",
          "4 / 4 = 1 (left: 1 3 4)",
          "3 * 4 = 12 (left: 4 4 12)"
        ]
      },
      {
        "step": 2,
        "generated_samples": [
          "4 + 4 = 8 (left: 3 4 8)8 / 4 = 2 (left: 2 3)",
          "4 + 4 = 8 (left: 3 4 8)4 * 3 = 12 (left: 8 12)",
          "4 + 4 = 8 (left: 3 4 8)8 - 4 = 4 (left: 3 4)",
          "4 + 4 = 8 (left: 3 4 8)8 + 4 = 12 (left: 3 12)",
          "4 + 4 = 8 (left: 3 4 8)8 * 3 = 24 (left: 4 24)",
          "4 / 4 = 1 (left: 1 3 4)4 * 3 = 12 (left: 1 12)",
          "4 / 4 = 1 (left: 1 3 4)3 - 1 = 2 (left: 2 4)",
          "4 / 4 = 1 (left: 1 3 4)1 + 3 = 4 (left: 4 4)",
          "4 / 4 = 1 (left: 1 3 4)4 - 1 = 3 (left: 3 3)",
          "4 / 4 = 1 (left: 1 3 4)4 + 1 = 5 (left: 3 5)",
          "3 * 4 = 12 (left: 4 4 12)12 / 4 = 3 (left: 3 4)",
          "3 * 4 = 12 (left: 4 4 12)4 + 4 = 8 (left: 8 12)",
          "3 * 4 = 12 (left: 4 4 12)12 - 4 = 8 (left: 4 8)",
          "3 * 4 = 12 (left: 4 4 12)4 * 4 = 16 (left: 12 16)",
          "3 * 4 = 12 (left: 4 4 12)12 * 4 = 48 (left: 4 48)"
        ],
        "candidate_input_list": [
          "[2, 3]",
          "[8, 12]",
          "[3, 4]",
          "[3, 12]",
          "[4, 24]",
          "[1, 12]",
          "[2, 4]",
          "[4, 4]",
          "[3, 3]",
          "[3, 5]",
          "[3, 4]",
          "[8, 12]",
          "[4, 8]",
          "[12, 16]",
          "[4, 48]"
        ],
        "candidate_scores": [
          1,
          0.01,
          0.01,
          0.01,
          10,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0,
          0
        ],
        "new_target_input": [
          "[4, 24]",
          "[2, 3]",
          "[8, 12]"
        ],
        "new_target_path": [
          "4 + 4 = 8 (left: 3 4 8)8 * 3 = 24 (left: 4 24)",
          "4 + 4 = 8 (left: 3 4 8)8 / 4 = 2 (left: 2 3)",
          "4 + 4 = 8 (left: 3 4 8)4 * 3 = 12 (left: 8 12)"
        ]
      },
      {
        "step": 3,
        "generated_samples": [
          "4 + 4 = 8 (left: 3 4 8)8 * 3 = 24 (left: 4 24)4 + 24 = 28 (left: 28)",
          "4 + 4 = 8 (left: 3 4 8)8 * 3 = 24 (left: 4 24)24 / 4 = 6 (left: 6)",
          "4 + 4 = 8 (left: 3 4 8)8 * 3 = 24 (left: 4 24)24 - 4 = 20 (left: 20)",
          "4 + 4 = 8 (left: 3 4 8)8 * 3 = 24 (left: 4 24)4 * 24 = 96 (left: 96)",
          "4 + 4 = 8 (left: 3 4 8)8 * 3 = 24 (left: 4 24)24 / 6 = 4 (left: 4)",
          "4 + 4 = 8 (left: 3 4 8)8 / 4 = 2 (left: 2 3)2 + 3 = 5 (left: 5)",
          "4 + 4 = 8 (left: 3 4 8)8 / 4 = 2 (left: 2 3)3 - 2 = 1 (left: 1)",
          "4 + 4 = 8 (left: 3 4 8)8 / 4 = 2 (left: 2 3)2 * 3 = 6 (left: 6)",
          "4 + 4 = 8 (left: 3 4 8)4 * 3 = 12 (left: 8 12)8 + 12 = 20 (left: 20)",
          "4 + 4 = 8 (left: 3 4 8)4 * 3 = 12 (left: 8 12)12 - 8 = 4 (left: 4)",
          "4 + 4 = 8 (left: 3 4 8)4 * 3 = 12 (left: 8 12)8 * 12 = 96 (left: 96)",
          "4 + 4 = 8 (left: 3 4 8)4 * 3 = 12 (left: 8 12)12 / 8 = 1.5 (left: 1.5)",
          "4 + 4 = 8 (left: 3 4 8)4 * 3 = 12 (left: 8 12)12 / (8 / 2) = 3 (left: 3)"
        ],
        "candidate_input_list": [
          "[28]",
          "[6]",
          "[20]",
          "[96]",
          "[4]",
          "[5]",
          "[1]",
          "[6]",
          "[20]",
          "[4]",
          "[96]",
          "[1.5]",
          "[3]"
        ],
        "candidate_scores": [
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01
        ],
        "new_target_input": [
          "[28]",
          "[6]",
          "[20]"
        ],
        "new_target_path": [
          "4 + 4 = 8 (left: 3 4 8)8 * 3 = 24 (left: 4 24)4 + 24 = 28 (left: 28)",
          "4 + 4 = 8 (left: 3 4 8)8 * 3 = 24 (left: 4 24)24 / 4 = 6 (left: 6)",
          "4 + 4 = 8 (left: 3 4 8)8 * 3 = 24 (left: 4 24)24 - 4 = 20 (left: 20)"
        ]
      }
    ],
    "final_score": "failed"
  }
]